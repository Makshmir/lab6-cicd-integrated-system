version: '3.8'

services:
  app:
    build: . # Збирає образ з локального Dockerfile
    # image: your-dockerhub-username/my-app:${APP_TAG:-latest} # Альтернатива: використання зібраного образу
    container_name: integrated_app
    restart: unless-stopped
    ports:
      - "5000:5000" # Мапінг порту додатку
    networks:
      - app_network
      # - monitoring_network # Якщо розділяти мережі
    environment:
      # Передаємо адресу симулятора АЗ (якщо потрібно)
      - HW_SIMULATOR_ADDRESS=http://az_simulator:8080
    depends_on:
      - az_simulator # Додаток залежить від симулятора
    logging: # Налаштування логування для відправки в ELK
      driver: "gelf" # Або fluentd
      options:
        gelf-address: "udp://localhost:12201" # Адреса Logstash GELF input
        tag: "integrated_app"

  az_simulator:
    # Замініть на ваш реальний образ симулятора АЗ
    image: alpine:latest # Приклад заглушки
    container_name: az_simulator
    command: sh -c "echo 'Simulating HW...' && sleep infinity" # Проста команда для прикладу
    restart: unless-stopped
    # ports:
    #   - "8080:8080" # Якщо симулятор має API
    networks:
      - app_network

  prometheus:
    image: prom/prometheus:v2.37.0
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus # Збереження даних
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - app_network # Або monitoring_network

  grafana:
    image: grafana/grafana:8.5.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin # Змініть пароль!
      # Можна налаштувати джерело даних Prometheus автоматично
      # - GF_DATASOURCES_DEFAULT_NAME=Prometheus
      # - GF_DATASOURCES_DEFAULT_TYPE=prometheus
      # - GF_DATASOURCES_DEFAULT_URL=http://prometheus:9090
      # - GF_DATASOURCES_DEFAULT_ACCESS=proxy
    depends_on:
      - prometheus
    networks:
      - app_network # Або monitoring_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5 # Виберіть сумісну версію
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # Налаштуйте пам'ять
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - app_network # Або logging_network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.5
    container_name: logstash
    restart: unless-stopped
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro # Конфігурація pipeline
    ports:
      - "5044:5044" # Порт для Beats (якщо використовуєте)
      - "12201:12201/udp" # Порт для GELF input (використовується в 'app')
    depends_on:
      - elasticsearch
    networks:
      - app_network # Або logging_network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.5
    container_name: kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200 # Адреса Elasticsearch
    depends_on:
      - elasticsearch
    networks:
      - app_network # Або logging_network

networks:
  app_network:
    driver: bridge
  # Можна створити окремі мережі для моніторингу/логування
  # monitoring_network:
  #   driver: bridge
  # logging_network:
  #   driver: bridge

volumes: # Для збереження даних
  prometheus_data:
  grafana_data:
  elasticsearch_data: