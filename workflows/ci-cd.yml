name: Integrated System CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main 

jobs:
  build:
    name: Build & Test App
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image for App
        id: build_app

        run: docker build -t my-integrated-app:ci-test .

      - name: Run Unit/Integration Tests (using Docker)
        run: |
          # Запускаємо контейнер з зібраним образом і виконуємо тести всередині
          docker run --rm my-integrated-app:ci-test pytest tests/
          # Примітка: Якщо ваші тести потребують запущеного docker-compose,
          # їх краще перенести в job 'test_compose_startup' після 'docker-compose up'.


  push_image:
    name: Push Docker Image to Registry
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-integrated-app:latest,${{ secrets.DOCKERHUB_USERNAME }}/my-integrated-app:${{ github.sha }}


  test_compose_startup:
    name: Test Docker Compose Startup
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image for App (required for compose)

        run: echo "Assuming docker-compose will build the 'app' service from context."


      - name: Start services with Docker Compose
        run: docker-compose -f docker-compose.yml up -d

      - name: Wait for services
        run: sleep 20

      - name: Check running containers status
        run: docker-compose ps

      - name: Check App Health (Example)
        run: |
          # Перевіряємо, чи відповідає сервіс 'app' на порту 5000
          # Команда curl --fail поверне ненульовий код виходу, якщо HTTP статус не 2xx
          curl --fail http://localhost:5000/status || exit 1
          # Додайте інші перевірки, якщо потрібно


      - name: Stop and clean up services
        if: always()
        run: docker-compose down -v --remove-orphans
